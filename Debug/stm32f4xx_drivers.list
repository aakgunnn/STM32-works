
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ac8  08000ac8  00001ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ad4  08000ad4  00001ae4  2**0
                  CONTENTS
  4 .ARM          00000008  08000ad4  08000ad4  00001ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000adc  08000ae4  00001ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00001adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00001ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001ae4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011f6  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000447  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00003158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e2  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000205e  00000000  00000000  0000337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001824  00000000  00000000  000053d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008fb5  00000000  00000000  00006bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000fbb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000448  00000000  00000000  0000fbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ab0 	.word	0x08000ab0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ab0 	.word	0x08000ab0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
#include "stm32f407xx.h"
#include "string.h"



void delay(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for (uint32_t i =0 ;i<500000;i++ );
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode :5
 */

void SPI2_GPIOInits(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800020a:	4b14      	ldr	r3, [pc, #80]	@ (800025c <SPI2_GPIOInits+0x58>)
 800020c:	607b      	str	r3, [r7, #4]

	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]

	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]

	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]

	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]

	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]



	//SCLK

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f9ad 	bl	8000588 <GPIO_Init>


	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9a7 	bl	8000588 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800023a:	230e      	movs	r3, #14
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f9a1 	bl	8000588 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000246:	230c      	movs	r3, #12
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f99b 	bl	8000588 <GPIO_Init>


}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <SPI2_Inits>:


void SPI2_Inits(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <SPI2_Inits+0x38>)
 8000268:	607b      	str	r3, [r7, #4]

	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026a:	2301      	movs	r3, #1
 800026c:	727b      	strb	r3, [r7, #9]

	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800026e:	2301      	movs	r3, #1
 8000270:	723b      	strb	r3, [r7, #8]

	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //generates sclk of 8Mhz
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]

	SPI2Handle.SPIConfig.SPI_DFF=SPI_DFF_8BITS;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]

	SPI2Handle.SPIConfig.SPI_CPOL=SPI_CPOL_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]

	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	737b      	strb	r3, [r7, #13]

	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //hardware slave management enabled for NSS pin
 8000282:	2300      	movs	r3, #0
 8000284:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fb67 	bl	800095c <SPI_Init>

}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <SPI_SSOEConfig>:




void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80002a8:	78fb      	ldrb	r3, [r7, #3]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d106      	bne.n	80002bc <SPI_SSOEConfig+0x20>
		pSPIx ->CR2 |= (1<< SPI_CR2_SSOE);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	f043 0204 	orr.w	r2, r3, #4
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx ->CR2 &= ~(1<< SPI_CR2_SSOE);
	}

}
 80002ba:	e005      	b.n	80002c8 <SPI_SSOEConfig+0x2c>
		pSPIx ->CR2 &= ~(1<< SPI_CR2_SSOE);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	f023 0204 	bic.w	r2, r3, #4
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	605a      	str	r2, [r3, #4]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <main>:


	GPIO_Init(&GpioBtn);
}

int main(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0


	char user_data[] = "Hello World";
 80002da:	4a1f      	ldr	r2, [pc, #124]	@ (8000358 <main+0x84>)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}



	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002e4:	f7ff ff8e 	bl	8000204 <SPI2_GPIOInits>


	//This function is used to initialize the  SPI2 peripheral parameters
	SPI2_Inits();
 80002e8:	f7ff ffba 	bl	8000260 <SPI2_Inits>
	 * the nss pin is automatically managed by the hardware
	 * i.e. when SPE = 1, NSS will be pulled to low
	 * and NSS pin will be high when SPE =0
	 */

	SPI_SSOEConfig(SPI2,ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	481b      	ldr	r0, [pc, #108]	@ (800035c <main+0x88>)
 80002f0:	f7ff ffd4 	bl	800029c <SPI_SSOEConfig>

	while(1){

		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 80002f4:	bf00      	nop
 80002f6:	2100      	movs	r1, #0
 80002f8:	4819      	ldr	r0, [pc, #100]	@ (8000360 <main+0x8c>)
 80002fa:	f000 fab1 	bl	8000860 <GPIO_ReadFromInputPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f8      	beq.n	80002f6 <main+0x22>

		delay();
 8000304:	f7ff ff68 	bl	80001d8 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	4814      	ldr	r0, [pc, #80]	@ (800035c <main+0x88>)
 800030c:	f000 fb0a 	bl	8000924 <SPI_PeripheralControl>


		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff58 	bl	80001c8 <strlen>
 8000318:	4603      	mov	r3, r0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <main+0x88>)
 8000326:	f000 fb69 	bl	80009fc <SPI_SendData>


		// to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff4b 	bl	80001c8 <strlen>
 8000332:	4602      	mov	r2, r0
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4808      	ldr	r0, [pc, #32]	@ (800035c <main+0x88>)
 800033a:	f000 fb5f 	bl	80009fc <SPI_SendData>

		//lets confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 800033e:	bf00      	nop
 8000340:	2180      	movs	r1, #128	@ 0x80
 8000342:	4806      	ldr	r0, [pc, #24]	@ (800035c <main+0x88>)
 8000344:	f000 faa2 	bl	800088c <SPI_GetFlagStatus>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f8      	bne.n	8000340 <main+0x6c>


		//disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 800034e:	2100      	movs	r1, #0
 8000350:	4802      	ldr	r0, [pc, #8]	@ (800035c <main+0x88>)
 8000352:	f000 fae7 	bl	8000924 <SPI_PeripheralControl>
	while(1){
 8000356:	e7cd      	b.n	80002f4 <main+0x20>
 8000358:	08000ac8 	.word	0x08000ac8
 800035c:	40003800 	.word	0x40003800
 8000360:	40020000 	.word	0x40020000

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	@ (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000368:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	@ (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	@ (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	@ (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	@ (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 fb69 	bl	8000a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main // *****************************************************************************************has changed****************** remove comment
 8000396:	f7ff ff9d 	bl	80002d4 <main>

0800039a <LoopForever>:

LoopForever:
  b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <GPIO_PeriClockControl>:
 *
 */


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx ,uint8_t EnorDi)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d162      	bne.n	8000490 <GPIO_PeriClockControl+0xd8>

		if(pGPIOx == GPIOA){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a64      	ldr	r2, [pc, #400]	@ (8000560 <GPIO_PeriClockControl+0x1a8>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003d2:	4b64      	ldr	r3, [pc, #400]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	4a63      	ldr	r2, [pc, #396]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DI();
		}

	}

}
 80003de:	e0b9      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a61      	ldr	r2, [pc, #388]	@ (8000568 <GPIO_PeriClockControl+0x1b0>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e8:	4b5e      	ldr	r3, [pc, #376]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80003ee:	f043 0302 	orr.w	r3, r3, #2
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f4:	e0ae      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a5c      	ldr	r2, [pc, #368]	@ (800056c <GPIO_PeriClockControl+0x1b4>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003fe:	4b59      	ldr	r3, [pc, #356]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000402:	4a58      	ldr	r2, [pc, #352]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000404:	f043 0304 	orr.w	r3, r3, #4
 8000408:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040a:	e0a3      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a58      	ldr	r2, [pc, #352]	@ (8000570 <GPIO_PeriClockControl+0x1b8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000414:	4b53      	ldr	r3, [pc, #332]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a52      	ldr	r2, [pc, #328]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000420:	e098      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a53      	ldr	r2, [pc, #332]	@ (8000574 <GPIO_PeriClockControl+0x1bc>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800042a:	4b4e      	ldr	r3, [pc, #312]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	4a4d      	ldr	r2, [pc, #308]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000430:	f043 0310 	orr.w	r3, r3, #16
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000436:	e08d      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a4f      	ldr	r2, [pc, #316]	@ (8000578 <GPIO_PeriClockControl+0x1c0>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000440:	4b48      	ldr	r3, [pc, #288]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000444:	4a47      	ldr	r2, [pc, #284]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044c:	e082      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a4a      	ldr	r2, [pc, #296]	@ (800057c <GPIO_PeriClockControl+0x1c4>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000456:	4b43      	ldr	r3, [pc, #268]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045a:	4a42      	ldr	r2, [pc, #264]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800045c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000460:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000462:	e077      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a46      	ldr	r2, [pc, #280]	@ (8000580 <GPIO_PeriClockControl+0x1c8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800046c:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000470:	4a3c      	ldr	r2, [pc, #240]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000476:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000478:	e06c      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a41      	ldr	r2, [pc, #260]	@ (8000584 <GPIO_PeriClockControl+0x1cc>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d168      	bne.n	8000554 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000482:	4b38      	ldr	r3, [pc, #224]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	4a37      	ldr	r2, [pc, #220]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800048c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048e:	e061      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a33      	ldr	r2, [pc, #204]	@ (8000560 <GPIO_PeriClockControl+0x1a8>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000498:	4b32      	ldr	r3, [pc, #200]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a31      	ldr	r2, [pc, #196]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800049e:	f023 0301 	bic.w	r3, r3, #1
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a4:	e056      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000568 <GPIO_PeriClockControl+0x1b0>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004b4:	f023 0302 	bic.w	r3, r3, #2
 80004b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ba:	e04b      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a2b      	ldr	r2, [pc, #172]	@ (800056c <GPIO_PeriClockControl+0x1b4>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004c4:	4b27      	ldr	r3, [pc, #156]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c8:	4a26      	ldr	r2, [pc, #152]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004ca:	f023 0304 	bic.w	r3, r3, #4
 80004ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d0:	e040      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a26      	ldr	r2, [pc, #152]	@ (8000570 <GPIO_PeriClockControl+0x1b8>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004da:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004e0:	f023 0308 	bic.w	r3, r3, #8
 80004e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e6:	e035      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a22      	ldr	r2, [pc, #136]	@ (8000574 <GPIO_PeriClockControl+0x1bc>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 80004f6:	f023 0310 	bic.w	r3, r3, #16
 80004fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004fc:	e02a      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a1d      	ldr	r2, [pc, #116]	@ (8000578 <GPIO_PeriClockControl+0x1c0>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800050c:	f023 0320 	bic.w	r3, r3, #32
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000512:	e01f      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a19      	ldr	r2, [pc, #100]	@ (800057c <GPIO_PeriClockControl+0x1c4>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800051c:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000528:	e014      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <GPIO_PeriClockControl+0x1c8>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a0b      	ldr	r2, [pc, #44]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 8000538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053e:	e009      	b.n	8000554 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a10      	ldr	r2, [pc, #64]	@ (8000584 <GPIO_PeriClockControl+0x1cc>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d105      	bne.n	8000554 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054c:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <GPIO_PeriClockControl+0x1ac>)
 800054e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000552:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40020000 	.word	0x40020000
 8000564:	40023800 	.word	0x40023800
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40021000 	.word	0x40021000
 8000578:	40021400 	.word	0x40021400
 800057c:	40021800 	.word	0x40021800
 8000580:	40021c00 	.word	0x40021c00
 8000584:	40022000 	.word	0x40022000

08000588 <GPIO_Init>:



void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]


	// enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff0c 	bl	80003b8 <GPIO_PeriClockControl>



	// 1. configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d81f      	bhi.n	80005e8 <GPIO_Init+0x60>
		//then non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	2303      	movs	r3, #3
 80005c8:	408b      	lsls	r3, r1
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	400a      	ands	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; // setting
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	e0b0      	b.n	800074a <GPIO_Init+0x1c2>
	}
	else{

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d117      	bne.n	8000620 <GPIO_Init+0x98>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005f0:	4b90      	ldr	r3, [pc, #576]	@ (8000834 <GPIO_Init+0x2ac>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7912      	ldrb	r2, [r2, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	408a      	lsls	r2, r1
 80005fe:	4611      	mov	r1, r2
 8000600:	4a8c      	ldr	r2, [pc, #560]	@ (8000834 <GPIO_Init+0x2ac>)
 8000602:	430b      	orrs	r3, r1
 8000604:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b8b      	ldr	r3, [pc, #556]	@ (8000834 <GPIO_Init+0x2ac>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	43d2      	mvns	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a86      	ldr	r2, [pc, #536]	@ (8000834 <GPIO_Init+0x2ac>)
 800061a:	400b      	ands	r3, r1
 800061c:	6093      	str	r3, [r2, #8]
 800061e:	e094      	b.n	800074a <GPIO_Init+0x1c2>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b05      	cmp	r3, #5
 8000626:	d117      	bne.n	8000658 <GPIO_Init+0xd0>
		{
			//1. confiure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000628:	4b82      	ldr	r3, [pc, #520]	@ (8000834 <GPIO_Init+0x2ac>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	4611      	mov	r1, r2
 8000638:	4a7e      	ldr	r2, [pc, #504]	@ (8000834 <GPIO_Init+0x2ac>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800063e:	4b7d      	ldr	r3, [pc, #500]	@ (8000834 <GPIO_Init+0x2ac>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	4611      	mov	r1, r2
 8000648:	2201      	movs	r2, #1
 800064a:	408a      	lsls	r2, r1
 800064c:	43d2      	mvns	r2, r2
 800064e:	4611      	mov	r1, r2
 8000650:	4a78      	ldr	r2, [pc, #480]	@ (8000834 <GPIO_Init+0x2ac>)
 8000652:	400b      	ands	r3, r1
 8000654:	60d3      	str	r3, [r2, #12]
 8000656:	e078      	b.n	800074a <GPIO_Init+0x1c2>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	2b06      	cmp	r3, #6
 800065e:	d116      	bne.n	800068e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000660:	4b74      	ldr	r3, [pc, #464]	@ (8000834 <GPIO_Init+0x2ac>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a70      	ldr	r2, [pc, #448]	@ (8000834 <GPIO_Init+0x2ac>)
 8000672:	430b      	orrs	r3, r1
 8000674:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000676:	4b6f      	ldr	r3, [pc, #444]	@ (8000834 <GPIO_Init+0x2ac>)
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	7912      	ldrb	r2, [r2, #4]
 800067e:	4611      	mov	r1, r2
 8000680:	2201      	movs	r2, #1
 8000682:	408a      	lsls	r2, r1
 8000684:	4611      	mov	r1, r2
 8000686:	4a6b      	ldr	r2, [pc, #428]	@ (8000834 <GPIO_Init+0x2ac>)
 8000688:	430b      	orrs	r3, r1
 800068a:	60d3      	str	r3, [r2, #12]
 800068c:	e05d      	b.n	800074a <GPIO_Init+0x1c2>
		}
		else
		{
			//2. configure the GPIO port selection in SYS_EXTICR
			uint8_t temp1 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber / 4;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	f003 0303 	and.w	r3, r3, #3
 800069e:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a64      	ldr	r2, [pc, #400]	@ (8000838 <GPIO_Init+0x2b0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d032      	beq.n	8000710 <GPIO_Init+0x188>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a63      	ldr	r2, [pc, #396]	@ (800083c <GPIO_Init+0x2b4>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d02b      	beq.n	800070c <GPIO_Init+0x184>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a61      	ldr	r2, [pc, #388]	@ (8000840 <GPIO_Init+0x2b8>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d024      	beq.n	8000708 <GPIO_Init+0x180>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a60      	ldr	r2, [pc, #384]	@ (8000844 <GPIO_Init+0x2bc>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d01d      	beq.n	8000704 <GPIO_Init+0x17c>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a5e      	ldr	r2, [pc, #376]	@ (8000848 <GPIO_Init+0x2c0>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d016      	beq.n	8000700 <GPIO_Init+0x178>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a5d      	ldr	r2, [pc, #372]	@ (800084c <GPIO_Init+0x2c4>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d00f      	beq.n	80006fc <GPIO_Init+0x174>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a5b      	ldr	r2, [pc, #364]	@ (8000850 <GPIO_Init+0x2c8>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d008      	beq.n	80006f8 <GPIO_Init+0x170>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a5a      	ldr	r2, [pc, #360]	@ (8000854 <GPIO_Init+0x2cc>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d101      	bne.n	80006f4 <GPIO_Init+0x16c>
 80006f0:	2307      	movs	r3, #7
 80006f2:	e00e      	b.n	8000712 <GPIO_Init+0x18a>
 80006f4:	2300      	movs	r3, #0
 80006f6:	e00c      	b.n	8000712 <GPIO_Init+0x18a>
 80006f8:	2306      	movs	r3, #6
 80006fa:	e00a      	b.n	8000712 <GPIO_Init+0x18a>
 80006fc:	2305      	movs	r3, #5
 80006fe:	e008      	b.n	8000712 <GPIO_Init+0x18a>
 8000700:	2304      	movs	r3, #4
 8000702:	e006      	b.n	8000712 <GPIO_Init+0x18a>
 8000704:	2303      	movs	r3, #3
 8000706:	e004      	b.n	8000712 <GPIO_Init+0x18a>
 8000708:	2302      	movs	r3, #2
 800070a:	e002      	b.n	8000712 <GPIO_Init+0x18a>
 800070c:	2301      	movs	r3, #1
 800070e:	e000      	b.n	8000712 <GPIO_Init+0x18a>
 8000710:	2300      	movs	r3, #0
 8000712:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 8000714:	4b50      	ldr	r3, [pc, #320]	@ (8000858 <GPIO_Init+0x2d0>)
 8000716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000718:	4a4f      	ldr	r2, [pc, #316]	@ (8000858 <GPIO_Init+0x2d0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6453      	str	r3, [r2, #68]	@ 0x44
			SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 8000720:	7c7a      	ldrb	r2, [r7, #17]
 8000722:	7cbb      	ldrb	r3, [r7, #18]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f103 	lsl.w	r1, r2, r3
 800072a:	4a4c      	ldr	r2, [pc, #304]	@ (800085c <GPIO_Init+0x2d4>)
 800072c:	7cfb      	ldrb	r3, [r7, #19]
 800072e:	3302      	adds	r3, #2
 8000730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]




			//3. enable the exti   interrupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	4b3f      	ldr	r3, [pc, #252]	@ (8000834 <GPIO_Init+0x2ac>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7912      	ldrb	r2, [r2, #4]
 800073c:	4611      	mov	r1, r2
 800073e:	2201      	movs	r2, #1
 8000740:	408a      	lsls	r2, r1
 8000742:	4611      	mov	r1, r2
 8000744:	4a3b      	ldr	r2, [pc, #236]	@ (8000834 <GPIO_Init+0x2ac>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6013      	str	r3, [r2, #0]


	}


	temp = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<  (2 * pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	799b      	ldrb	r3, [r3, #6]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR |= temp;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6899      	ldr	r1, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	430a      	orrs	r2, r1
 800076e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<  (2 * pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	79db      	ldrb	r3, [r3, #7]
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR |= temp;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68d9      	ldr	r1, [r3, #12]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	430a      	orrs	r2, r1
 8000794:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  ( pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7a1b      	ldrb	r3, [r3, #8]
 800079e:	461a      	mov	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER |= temp;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6859      	ldr	r1, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a5b      	ldrb	r3, [r3, #9]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d131      	bne.n	800082a <GPIO_Init+0x2a2>
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	791b      	ldrb	r3, [r3, #4]
 80007ca:	08db      	lsrs	r3, r3, #3
 80007cc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<(4 * temp2)); //clearing
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7c3a      	ldrb	r2, [r7, #16]
 80007de:	3208      	adds	r2, #8
 80007e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	220f      	movs	r2, #15
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	7c3a      	ldrb	r2, [r7, #16]
 80007f8:	4001      	ands	r1, r0
 80007fa:	3208      	adds	r2, #8
 80007fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle ->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2)); //setting
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	7c3a      	ldrb	r2, [r7, #16]
 8000806:	3208      	adds	r2, #8
 8000808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	461a      	mov	r2, r3
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	7c3a      	ldrb	r2, [r7, #16]
 8000822:	4301      	orrs	r1, r0
 8000824:	3208      	adds	r2, #8
 8000826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]



	}
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40013c00 	.word	0x40013c00
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	40020800 	.word	0x40020800
 8000844:	40020c00 	.word	0x40020c00
 8000848:	40021000 	.word	0x40021000
 800084c:	40021400 	.word	0x40021400
 8000850:	40021800 	.word	0x40021800
 8000854:	40021c00 	.word	0x40021c00
 8000858:	40023800 	.word	0x40023800
 800085c:	40013800 	.word	0x40013800

08000860 <GPIO_ReadFromInputPin>:
 * @Note					-
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx ,uint8_t PinNumber)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx ->IDR >> PinNumber) & 0x00000001);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	fa22 f303 	lsr.w	r3, r2, r3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
	return value;
 800087e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SPI_GetFlagStatus>:

#include "stm32f407xx_spi_driver.h"
#include "stm32f407xx.h"


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	if (pSPIx -> SR & FlagName){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	4013      	ands	r3, r2
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SPI_PeriClockControl>:




void SPI_PeriClockControl(SPI_RegDef_t *pSPIx ,uint8_t EnorDi){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]


	if (EnorDi == ENABLE)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11f      	bne.n	8000906 <SPI_PeriClockControl+0x52>
	{
			if(pSPIx == SPI1){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <SPI_PeriClockControl+0x60>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <SPI_PeriClockControl+0x64>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <SPI_PeriClockControl+0x64>)
 80008d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else{

	}

}
 80008da:	e014      	b.n	8000906 <SPI_PeriClockControl+0x52>
			else if(pSPIx == SPI2){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <SPI_PeriClockControl+0x68>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d106      	bne.n	80008f2 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <SPI_PeriClockControl+0x64>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <SPI_PeriClockControl+0x64>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ee:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008f0:	e009      	b.n	8000906 <SPI_PeriClockControl+0x52>
			else if(pSPIx == SPI3){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <SPI_PeriClockControl+0x6c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d105      	bne.n	8000906 <SPI_PeriClockControl+0x52>
				SPI3_PCLK_EN();
 80008fa:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <SPI_PeriClockControl+0x64>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a06      	ldr	r2, [pc, #24]	@ (8000918 <SPI_PeriClockControl+0x64>)
 8000900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40013000 	.word	0x40013000
 8000918:	40023800 	.word	0x40023800
 800091c:	40003800 	.word	0x40003800
 8000920:	40003c00 	.word	0x40003c00

08000924 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d106      	bne.n	8000944 <SPI_PeripheralControl+0x20>
		pSPIx -> CR1 |= (1<< SPI_CR1_SPE);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx ->CR1 &=~(1<<SPI_CR1_SPE);
	}
}
 8000942:	e005      	b.n	8000950 <SPI_PeripheralControl+0x2c>
		pSPIx ->CR1 &=~(1<<SPI_CR1_SPE);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffa2 	bl	80008b4 <SPI_PeriClockControl>


	//first lets configure the SPI_CR1 register


	uint32_t tempreg = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle -> SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]


	//2.configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d104      	bne.n	8000992 <SPI_Init+0x36>
		//bidi mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	e014      	b.n	80009bc <SPI_Init+0x60>

	}


	else if (pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	795b      	ldrb	r3, [r3, #5]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d104      	bne.n	80009a4 <SPI_Init+0x48>
			//bidi mode should be set
			tempreg |= (1<<SPI_CR1_BIDIMODE);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	e00b      	b.n	80009bc <SPI_Init+0x60>
	}

	else if (pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	795b      	ldrb	r3, [r3, #5]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d107      	bne.n	80009bc <SPI_Init+0x60>
		//bidi mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009b2:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ba:	60fb      	str	r3, [r7, #12]

	}

	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle -> SPIConfig.SPI_SclkSpeed <<3;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	799b      	ldrb	r3, [r3, #6]
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

	//4.configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	79db      	ldrb	r3, [r3, #7]
 80009cc:	02db      	lsls	r3, r3, #11
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle -> SPIConfig.SPI_CPOL <<1;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a1b      	ldrb	r3, [r3, #8]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

	//6. configure the CPHA
	tempreg |= pSPIHandle -> SPIConfig.SPI_CPHA << 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7a5b      	ldrb	r3, [r3, #9]
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]

	pSPIHandle -> pSPIx -> CR1 = tempreg;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SPI_SendData>:



void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]


	while(Len>0){
 8000a08:	e025      	b.n	8000a56 <SPI_SendData+0x5a>

		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000a0a:	bf00      	nop
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff ff3c 	bl	800088c <SPI_GetFlagStatus>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f8      	beq.n	8000a0c <SPI_SendData+0x10>

		//2.check the DFF bit CR1
		if(pSPIx -> CR1 & (1 << SPI_CR1_DFF)){
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00c      	beq.n	8000a40 <SPI_SendData+0x44>
			//16. bit DFF
			//1. load the data in to the DR
			pSPIx -> DR = ((uint16_t*)pTxBuffer);
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	60da      	str	r2, [r3, #12]
			Len--;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	607b      	str	r3, [r7, #4]
			Len--;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	e00a      	b.n	8000a56 <SPI_SendData+0x5a>
		}else{
			//8 bit DFF
			pSPIx -> DR = *pTxBuffer;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	60da      	str	r2, [r3, #12]
			Len--;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1d6      	bne.n	8000a0a <SPI_SendData+0xe>
		}

	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <__libc_init_array>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8000aa0 <__libc_init_array+0x38>)
 8000a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8000aa4 <__libc_init_array+0x3c>)
 8000a6e:	1b64      	subs	r4, r4, r5
 8000a70:	10a4      	asrs	r4, r4, #2
 8000a72:	2600      	movs	r6, #0
 8000a74:	42a6      	cmp	r6, r4
 8000a76:	d109      	bne.n	8000a8c <__libc_init_array+0x24>
 8000a78:	4d0b      	ldr	r5, [pc, #44]	@ (8000aa8 <__libc_init_array+0x40>)
 8000a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8000aac <__libc_init_array+0x44>)
 8000a7c:	f000 f818 	bl	8000ab0 <_init>
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	10a4      	asrs	r4, r4, #2
 8000a84:	2600      	movs	r6, #0
 8000a86:	42a6      	cmp	r6, r4
 8000a88:	d105      	bne.n	8000a96 <__libc_init_array+0x2e>
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a90:	4798      	blx	r3
 8000a92:	3601      	adds	r6, #1
 8000a94:	e7ee      	b.n	8000a74 <__libc_init_array+0xc>
 8000a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9a:	4798      	blx	r3
 8000a9c:	3601      	adds	r6, #1
 8000a9e:	e7f2      	b.n	8000a86 <__libc_init_array+0x1e>
 8000aa0:	08000adc 	.word	0x08000adc
 8000aa4:	08000adc 	.word	0x08000adc
 8000aa8:	08000adc 	.word	0x08000adc
 8000aac:	08000ae0 	.word	0x08000ae0

08000ab0 <_init>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	bf00      	nop
 8000ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab6:	bc08      	pop	{r3}
 8000ab8:	469e      	mov	lr, r3
 8000aba:	4770      	bx	lr

08000abc <_fini>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr
